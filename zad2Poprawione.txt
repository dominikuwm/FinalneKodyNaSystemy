#define FCY 4000000UL
#include <xc.h>
#include <stdint.h>
#include <libpic30.h>

/* konfiguracja fuse'ów */
#pragma config POSCMOD = NONE, FNOSC = FRC
#pragma config FCKSM = CSDCMD, IESO = OFF, OSCIOFNC = OFF
#pragma config WDTPS = PS32768, FWPSA = PR128, FWDTEN = OFF, WINDIS = ON
#pragma config ICS   = PGx2, GWRP = OFF,  GCP = OFF,  JTAGEN = OFF

/* tabele */
static const uint16_t periodTable[5] = {
    0x0320, 0x0640, 0x0C80, 0x12C0, 0x1F40
};

static const uint8_t snakeTable[] = {
    0x07,0x0E,0x1C,0x38,0x70,0xE0,0x70,0x38,0x1C,0x0E,0x07
};

/* zmienne globalne */
static volatile uint8_t mode         = 0;
static volatile uint8_t portValue    = 0;
static volatile uint8_t snakeIdx     = 0;
static volatile uint8_t flagNext     = 0;
static volatile uint8_t flagPrev     = 0;

/* deklaracje funkcji */
static void initIO(void);
static void initADC(void);
static void initTimer1(void);
static uint16_t readPot(void);
static void updateSpeed(uint16_t adc);
static inline void resetState(void);

/* inicjalizacja wejść/wyjść i CN */
static void initIO(void)
{
    TRISA = 0x0000;             // PortA jako wyjście
    TRISDbits.TRISD6 = 1;       // RD6 – przycisk
    TRISDbits.TRISD13 = 1;      // RD13 – przycisk
    AD1PCFG = 0xFFFF;
    AD1PCFGbits.PCFG5 = 0;      // RB5 jako kanał ADC

    /* konfigurujemy Change Notification Interrupt na RD6 i RD13 */
    CNEN1bits.CN15IE = 1;       // RD6 -> CN15
    CNEN2bits.CN19IE = 1;       // RD13 -> CN19
    IFS1bits.CNIF = 0;          // czyścimy flagę CN
    IEC1bits.CNIE = 1;          // włączamy przerwanie CN
}

/* inicjalizacja ADC */
static void initADC(void)
{
    AD1CON1 = 0;
    AD1CON2 = 0;
    AD1CON3 = 0x1F02;
    AD1CHS  = 0x0005;
    AD1CON1bits.ADON = 1;
}

/* odczyt potencjometru */
static uint16_t readPot(void)
{
    AD1CON1bits.SAMP = 1;
    __delay_us(10);
    AD1CON1bits.SAMP = 0;
    while (!AD1CON1bits.DONE);
    return ADC1BUF0 & 0x03FF;
}

/* timer co sylwetkę */
static void initTimer1(void)
{
    T1CON = 0x8030;
    TMR1  = 0;
    PR1   = periodTable[2];
    _T1IF = 0;
    _T1IP = 1;
    _T1IE = 1;
}

/* restart wzorców wyjścia */
static inline void resetState(void)
{
    portValue = 0;
    snakeIdx = 0;
}

/* dopasowanie prędkości do ADC */
static void updateSpeed(uint16_t adc)
{
    uint16_t newPR;
         if (adc < 205) newPR = periodTable[0];
    else if (adc < 410) newPR = periodTable[1];
    else if (adc < 615) newPR = periodTable[2];
    else if (adc < 820) newPR = periodTable[3];
    else                newPR = periodTable[4];

    if (newPR != PR1)
    {
        uint8_t oldIE = IEC0bits.T1IE;
        IEC0bits.T1IE = 0;
        PR1 = newPR;
        TMR1 = 0;
        IFS0bits.T1IF = 0;
        IEC0bits.T1IE = oldIE;
    }
}

/* przerwanie CN — jedynie ustawiające flagi */
void __attribute__((interrupt, no_auto_psv)) _CNInterrupt(void)
{
    static uint8_t last6 = 1, last13 = 1;
    uint8_t cur6 = PORTDbits.RD6;
    uint8_t cur13 = PORTDbits.RD13;

    if (last6 && !cur6)   flagNext = 1;
    if (last13 && !cur13) flagPrev = 1;

    last6 = cur6;
    last13 = cur13;
    IFS1bits.CNIF = 0;
}

/* przerwanie T1 – wykonuje właściwą logikę */
void __attribute__((interrupt, no_auto_psv)) _T1Interrupt(void)
{
    if (mode == 0)
    {
        portValue++;
        LATA = portValue ^ (portValue >> 1);
    }
    else
    {
        LATA = snakeTable[snakeIdx++];
        if (snakeIdx >= sizeof(snakeTable)) snakeIdx = 0;
    }
    _T1IF = 0;
}

/* główna pętla – obsługa flag i ADC */
int main(void)
{
    initIO();
    initADC();
    initTimer1();

    while (1)
    {
        if (flagNext)
        {
            mode = (mode + 1) & 1;
            resetState();
            flagNext = 0;
        }
        if (flagPrev)
        {
            mode = mode ^ 1;
            resetState();
            flagPrev = 0;
        }
        updateSpeed(readPot());
    }
}
